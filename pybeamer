#!/usr/bin/python3
#	pybeamer - HTML presentation/slide show generator
#	Copyright (C) 2015-2020 Johannes Bauer
#
#	This file is part of pybeamer.
#
#	pybeamer is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	pybeamer is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with pybeamer; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
import contextlib
import fractions
import argparse
from FriendlyArgumentParser import FriendlyArgumentParser
from Presentation import Presentation
from Renderer import Renderer

def parse_aspect(text):
	aspect = text.split(":", maxsplit = 1)
	if len(aspect) != 2:
		raise argparse.ArgumentTypeError("aspect ratio must be given in form \"width:height\"")
	try:
		width = int(aspect[0])
		height = int(aspect[1])
		return fractions.Fraction(width, height)
	except ValueError:
		raise argparse.ArgumentTypeError("aspect ratio width and height values must be integers")

parser = FriendlyArgumentParser(description = "Render a pybeamer template.")
parser.add_argument("-a", "--aspect", metavar = "x:y", type = parse_aspect, default = "16:9", help = "Aspect ratio to use. Defaults to %(default)s.")
parser.add_argument("-m", "--mode", choices = [ "default", "handout" ], default = "default", help = "Mode in which the slides should be rendered. Can be either %(choices)s, defaults to %(default)s.")
parser.add_argument("--template-dir", metavar = "path", default = None, help = "Source directory in which all templates are located. Defaults to the pybeamer/templates directory.")
parser.add_argument("-t", "--template", metavar = "name", default = "default", help = "Name of the template that should be rendered. Defaults to \"%(default)s\".")
parser.add_argument("-o", "--output", metavar = "path", default = "rendered", help = "Output directory in which the rendered template should be placed.")
parser.add_argument("-f", "--force", action = "store_true", help = "Overwrite the output directory even if it already exists.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("presentation_xml", metavar = "presentation_xml", help = "Source file that should be rendered.")
args = parser.parse_args(sys.argv[1:])

if args.template_dir is None:
	template_dir = os.path.dirname(os.path.realpath(__file__)) + "/templates"
else:
	template_dir = os.path.realpath(args.template_dir)

if os.path.exists(args.output) and not args.force:
	print("Refusing to overwrite output directory: %s" % (args.output), file = sys.stderr)
	sys.exit(1)

with contextlib.suppress(FileExistsError):
	os.makedirs(args.output)

presentation = Presentation(args.presentation_xml)
renderer = Renderer(template_dir = template_dir, template_name = args.template, aspect_ratio = args.aspect, output_dir = args.output)
rendered_presentation = renderer.render(presentation)
rendered_presentation.copy_style_files()
