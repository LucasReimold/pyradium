<?xml version="1.0" encoding="utf-8"?>
<presentation xmlns:s="https://github.com/johndoe31415/pybeamer">
	<meta>
		<title>Battle of Wolf 359</title>
		<subtitle>A Recap of Events</subtitle>
		<author>Jean-Luc Picard</author>
		<fullauthor>Jean-Luc Picard, Retired Starfleet Admiral</fullauthor>
		<affiliation>Starfleet</affiliation>
		<date>2020-01-01</date>
		<schedule>14:00-14:45</schedule>
		<format>
			<x>Foo</x>
		</format>
	</meta>

	<slide type="title" />

	<section>Introduction</section>
	<subsection>Nomenclature</subsection>
	<slide type="toc">
		<s:var name="begin" value="1" />
		<s:var name="end" value="2.3" />
	</slide>

	<slide>
		<s:var name="heading" value="Pausing Slides" />
		<ul>
			<li>This is a test! Pause1</li>
			<s:pause />
			<li>After the first pause! Pause2</li>
			<s:pause />
			<li>After the second pause! Pause3</li>
		</ul>
	</slide>

	<slide>
		<s:var name="heading" value="That's the second slide" />
		<ul>
			<li>This is a test!</li>
			<s:debug>This is debugging text.</s:debug>
			<li>Should be slide number two!</li>
			<li>Next up: include!</li>
		</ul>
	</slide>

	<include src="example_sub.xml" />

	<subsection>After Include Subsection</subsection>
	<slide>
		<s:var name="heading" value="After include" />
		<ul>
			<li>This is the slide which directly follows an include.</li>
		</ul>
	</slide>

	<slide>
		<s:var name="heading" value="Nested ULs" />
		<ul>
			<li>Level 1 Moo</li>
			<li>Level 1 Koo
				<ul>
					<li>Nested 1</li>
					<li>Nested 2</li>
				</ul>
			</li>
		</ul>
	</slide>

	<slide type="leftright">
		<s:var name="heading" value="Left/Right slide" />
		<s:content name="left">
			This is on the left side. It's a long text, so it gets wrapped. You get a nice feeling as to how wide it is.
		</s:content>
		<s:content name="right">
			This is on the right side. It's a long text, so it gets wrapped. You get a nice feeling as to how wide it is.
		</s:content>
	</slide>

	<slide>
		<s:var name="heading" value="Formula in Text" />
		<ul>
			<li>Short Weierstrass: <s:tex>y^2 = x^3 + ax + b</s:tex></li>
			<li>Some Sum: <s:tex>\sum_{i = 0}^{10} \frac{i^2}{\pi}</s:tex></li>
		</ul>
		<p>
			In general, the short Weierstrass form is given as the formula <s:tex>y^2 = x^3 + ax + b</s:tex> and that's just great.
		</p>
	</slide>

	<slide>
		<s:var name="heading" value="Long Formula" />
		<p>This is the long form:</p>
		<div><s:tex long="1">\sum_{i = 0}^{10} \frac{i^2}{\pi}</s:tex></div>
		<p>While this is the short one for comparison:</p>
		<div><s:tex>\sum_{i = 0}^{10} \frac{i^2}{\pi}</s:tex></div>
	</slide>

	<slide>
		<s:var name="heading" value="Some Python Code" />
		<s:code lang="python3"><![CDATA[
			if foo == "bar":
				print("foo was 'bar'")
				return getattr(self, "bar")
			else:
				print("foo was not 'bar'")
				return lambda x: tuple(x, "foo", 123)
		]]></s:code>
	</slide>

	<slide>
		<s:var name="heading" value="Some C Code" />
		<s:code lang="c"><![CDATA[
			int main(int argc, char **argv) {
				printf("Foo: %d -> %p\n", argc, argv);
				return 0;
			}
		]]></s:code>
	</slide>

	<slide>
		<s:var name="heading" value="Some Python Code from a File" />
		<s:code lang="python3" src="my_data.py" />
	</slide>

	<slide>
		<s:var name="heading" value="Some Terminal" />
		<s:term><![CDATA[
			$ ls /
			bin
			sbin
		]]></s:term>
	</slide>

	<slide>
		<s:var name="heading" value="Some Terminal from a File" />
		<s:term src="terminal_output.txt" />
	</slide>

	<slide>
		<s:var name="heading" value="Quotation Marks" />
		<ul>
			<li><s:enq>US style</s:enq></li>
			<li><s:enq type="fr">French style</s:enq></li>
			<li><s:enq type="de">German style</s:enq></li>
			<li><s:enq type="sgl">Single quotation marks</s:enq></li>
		</ul>
	</slide>

	<slide>
		<s:var name="heading" value="Arrows" />
		<ul>
			<li><s:ar>-)</s:ar> Right and long right <s:ar>--)</s:ar></li>
			<li><s:ar>(-</s:ar> Left and long left <s:ar>(--</s:ar></li>
			<li><s:ar>(-)</s:ar> both and <s:ar>(--)</s:ar> both long and both double <s:ar>(=)</s:ar> and both double long <s:ar>(==)</s:ar></li>
			<li><s:ar>=)</s:ar> Double Right</li>
			<li><s:ar>(=</s:ar> Double Left</li>
			<li><s:ar>enter</s:ar> Enter Key</li>
			<li><s:ar>light</s:ar> Lightning</li>
		</ul>
	</slide>

	<slide>
		<s:var name="heading" value="Symbols" />
		<ul>
			<li><s:sym>xor</s:sym> XOR and <s:sym>xmul</s:sym> XMUL</li>
			<li>Operators <s:sym>le</s:sym> <s:sym>lt</s:sym> <s:sym>eq</s:sym> <s:sym>neq</s:sym> <s:sym>gt</s:sym><s:sym>ge</s:sym></li>
			<li>Infinity <s:sym>inf</s:sym></li>
		</ul>
	</slide>

	<slide>
		<s:var name="heading" value="Emojis" />
		<ul>
			<li><s:emo>:)</s:emo> <s:emo>:))</s:emo> <s:emo>;)</s:emo></li>
			<li><s:emo>:(</s:emo> <s:emo>:((</s:emo> <s:emo>;(</s:emo></li>
			<li><s:emo>:|</s:emo> <s:emo>:o</s:emo> <s:emo>:O</s:emo></li>
		</ul>
	</slide>

	<slide>
		<s:var name="heading" value="Image Rendering" />
		<s:img src="3dbox.svg" />
	</slide>
</presentation>
