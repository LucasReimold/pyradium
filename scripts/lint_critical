#!/usr/bin/env python3
#	pyradium - HTML presentation/slide show generator
#	Copyright (C) 2015-2022 Johannes Bauer
#
#	This file is part of pyradium.
#
#	pyradium is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	pyradium is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with pyradium; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import json
import subprocess

lint_cmd = [ "pylint" ]
lint_cmd += [ "--indent-string", "\\t" ]
lint_cmd += [ "--ignore-long-lines", ".*" ]
lint_cmd += [ "-f", "json", "pyradium" ]
findings = json.loads(subprocess.run(lint_cmd, check = False, capture_output = True).stdout)

class LineGetter():
	def __init__(self):
		self._filename = None
		self._content = None

	def get(self, filename, lineno):
		if self._filename != filename:
			with open(filename) as f:
				self._content = f.read().split("\n")
			self._filename = filename
		return self._content[lineno - 1]
lget = LineGetter()

def print_finding(finding):
	print(f"{finding['path']} {finding['line']} MOC (\"{finding['module']}\", \"{finding['obj']}\", \"{finding['message-id']}\"), {finding['symbol']}: {finding['message']}")

def ignore_finding(finding):
	moc = (finding["module"], finding["obj"], finding["message-id"])
	ignore_mocs = set([
		("pyradium.__main__", "main.genparser", "E0102"),
		("pyradium.MultiCommand", "genparser", "E0102"),
		("pyradium.Tools", "XMLTools.normalize_ns.visit", "E0102"),
		("pyradium.xmlhooks.CodeHook", "CodeHook.handle_text", "E1101"),
		("pyradium.xmlhooks.XMLHookRegistry", "ReplacementHook.handle", "E1135"),
		("pyradium.xmlhooks.XMLHookRegistry", "ReplacementHook.handle", "E1136"),
	])
	if moc in ignore_mocs:
		return True

	ignore_symbols = set([
		"missing-function-docstring",
		"missing-module-docstring",
		"missing-class-docstring",
		"invalid-name",
		"duplicate-code",
		"too-few-public-methods",
		"superfluous-parens",
		"too-many-arguments",
		"protected-access",
		"multiple-statements",
		"too-many-branches",
		"too-many-public-methods",
		"attribute-defined-outside-init",
		"unspecified-encoding",
		"unused-variable",
		"fixme",
		"unused-argument",
		"too-many-instance-attributes",
		"no-else-return",
		"arguments-renamed",
		"redefined-outer-name",
		"too-many-locals",
		"useless-super-delegation",
		"no-else-raise",
		"broad-except",
		"too-many-nested-blocks",
		"useless-super-delegation",
		"consider-using-max-builtin",
	])
	if finding["symbol"] in ignore_symbols:
		return True

	always_report_symbols = set([
		"unused-import",
		"raise-missing-from",
		"anomalous-backslash-in-string",
		"wrong-import-order",
		"inconsistent-return-statements",
		"logging-fstring-interpolation",
		"f-string-without-interpolation",
		"consider-using-max-builtin",
		"subprocess-run-check",
		#"consider-using-f-string",
	])
	if finding["symbol"] in always_report_symbols:
		return False

	return not finding["message-id"].startswith("E")

critical_findings = [ finding for finding in findings if not ignore_finding(finding) ]
if len(critical_findings) > 0:
	print(f"Error: {len(critical_findings)} critical findings found.", file = sys.stderr)
	for finding in critical_findings:
		print_finding(finding)
	with open("/tmp/fixfile", "w") as f:
		for finding in critical_findings:
			print(f"{finding['path']}:{finding['line']}:{finding['message']}", file = f)
	print("Vim quickfix file written: vi -q /tmp/fixfile")
	sys.exit(1)
else:
	print("No critical linter findings found.")
	sys.exit(0)
